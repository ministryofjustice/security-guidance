<project name="mojsecguide" default="dist" basedir="..">
	<description>
		Build scripting for MoJ Security Guidance.

		To run a build:
		1. Run the startcmd.sh script in the DITA_DIR installation directory.
		2. Change to the directory containing this Ant build script.
		3. Run a build ant -lib $DITA_DIR/config -f builder.ant [task], for example:
			ant -lib $DITA_DIR/config -f builder.ant clean
	</description>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/buildUtils/ant-contrib-0.6.jar"/>
		</classpath>
	</taskdef>

	<tempfile property="temp.file" deleteonexit="true"/>

	<!-- set global properties for this build -->
	<property environment="env"/>
	<property name="ditasrc" location="dita"/>
	<property name="ditabuild" location="ditabuild"/>
	<property name="build" location="${ditabuild}/out"/>
	<property name="buildhtml" location="${ditabuild}/outhtml"/>
	<property name="buildUtils" location="buildUtils"/>
	<!-- <property name="images.output.dir" location="${ditabuild}/out/images"/>  22020331 -->
	<property name="docs" location="docs"/>
	<property name="worddocs" location="worddocs"/>
	<!--
	<property name="intranet" location="intranet"/>
	<property name="images" location="images"/>
	 22020331 -->
	<property name="jekyll-baseline" location="jekyll-baseline"/>
	<property name="iasme" location="iasme"/>
	<property name="hmcts" location="hmcts"/>
	<property name="ost" location="ost"/>
	<property name="culture" location="culture"/>
	<property name="culturebuild" location="${ditabuild}/culture"/>
	<!--
	<property name="ostbuild" location="${docs}/ost"/>
	-->
	<property name="redirects" location="redirects"/>
	<!-- Ensure that environment variable DITA_DIR is set to
		the installation directory for the DITA Open Source Toolkit -->
	<property name="dita.dir" location="${env.DITA_DIR}"/>

	<target name="clean"
			description="clean up">
		<!-- Delete all the output folders, to ensure clean output. -->
		<delete dir="${ditabuild}"/>
		<delete dir="${build}"/>
		<delete dir="${docs}"/>
		<delete dir="${intranet}"/>
	</target>

	<target name="init" depends="clean">
		<!-- Create interim dita source. -->
		<mkdir dir="${ditabuild}"/>
		<copy todir="${ditabuild}" >
			<fileset dir="${ditasrc}"/>
		</copy>
		<copy todir="${ditabuild}/ost" >
			<fileset dir="${ost}"/>
		</copy>
		<!--
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ost}/ost.ditamap"/>
			<!__
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/html.ditaval:${ditabuild}/audience-tech.ditaval"/>
			__>
			<property name="output.dir" location="${ditabuild}/ost"/>
			<property name="transtype" value="dita"/>
		</ant>
		<replaceregexp match=' specializations=""' replace="" flags="g" >
			<fileset dir="${ditabuild}/ost" includes="**/*.md"/>
		</replaceregexp>
		<move todir="${ditabuild}/ost">
			<fileset dir="${ditabuild}/ost">
				<exclude name="**/*dita*"/>
			</fileset>
			<mapper type="glob" from="*.md" to="*.dita"/>
		</move>
		-->
		<copy todir="${ditabuild}/hmcts" >
			<fileset dir="${hmcts}"/>
		</copy>
		<!-- Create the time stamp -->
		<tstamp>
			<format property="TODAY_GB" pattern="d MMMM yyyy" locale="en,GB"/>
			<format property="EXPIRY_GB" pattern="d MMMM yyyy" locale="en,GB" offset="1" unit="month"/>
		</tstamp>
		<!-- Create the date of this build as a conref source. -->
		<copy file="${ditabuild}/tstamp-src.dita" tofile="${ditabuild}/tstamp.dita" overwrite="true"/>
		<replace file="${ditabuild}/tstamp.dita" token="@TSTAMP@" value="${TODAY_GB}"/>
		<replace file="${ditabuild}/tstamp.dita" token="@TSTAMP-EXPIRY@" value="${EXPIRY_GB}"/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<!-- Create the docs directory structure used for publication -->
		<mkdir dir="${docs}"/>
		<!-- Copy across culture deliverables into the landing page area. -->
		<copy todir="${culturebuild}" >
			<fileset dir="${culture}"/>
		</copy>
	</target>

	<!--
	<target name="policy_builder"
			description="create standalone PDF of a given policy document.">
		<echo message="Building policy: ${thePolicy}"/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/${thePolicy}.ditamap"/>
			<property name="args.filter" value="${ditabuild}/intranet.ditaval:${ditabuild}/policy.ditaval:${ditabuild}/pdf.ditaval:${ditabuild}/audience-tech.ditaval"/>
			<property name="output.dir" location="${intranet}"/>
			<property name="transtype" value="pdf"/>
		</ant>
		<exec dir="buildUtils" executable="python3">
			<arg line="combinator.py ../srcMedia/${thePolicy}.pdf ../intranet/${thePolicy}.pdf ${temp.file}"/>
		</exec>
		<copy file="${temp.file}" tofile="${intranet}/${thePolicy}.pdf" overwrite="true"/>
	</target>
	-->

	<target name="addLinkTarget">
		<echo message="Adding link targets in file: ${theFile}"/>
		<exec dir="${buildUtils}" executable="python3" output="addLinkTarget.txt">
			<arg line="addLinkTarget.py ${theFile}"/>
		</exec>
		<!-- Report results -->
		<loadfile property="addLinkTarget" srcFile="addLinkTarget.txt" />
		<echo message="${addLinkTarget}" />
		<delete file="addLinkTarget.txt"/>
		<!-- Tidy up. -->
		<!-- <move file="${theFile}.new" tofile="${theFile}" overwrite="true"/> -->
	</target>

	<target name="dlTarget">
		<echo message="Adding definition list link targets in file: ${theFile}"/>
		<exec dir="${buildUtils}" executable="python3" output="dlTarget.txt">
			<arg line="dlTarget.py ${theFile}"/>
		</exec>
		<!-- Report results -->
		<loadfile property="dlTarget" srcFile="dlTarget.txt" />
		<echo message="${dlTarget}" />
		<delete file="dlTarget.txt"/>
		<!-- Tidy up. -->
		<!-- <move file="${theFile}.new" tofile="${theFile}" overwrite="true"/> -->
	</target>

	<!--
	<target name="compile_ost" depends="init, compile_intranet"
				description="Compile OST content into production Markdown">
		<delete dir="${ostbuild}"/>
		<copy todir="${ostbuild}" >
			<fileset dir="${ost}"/>
		</copy>
		<!_
			<replace dir="${ostbuild}" replaceFilterFile="${dita}/conrefs.properties"/>
		 __>
		<echo message="Convert to Intranet markdown."/>
		<foreach target="addLinkTarget" param="theFile">
			<path>
				<fileset dir="${ostbuild}" includes="**/*.md"/>
			</path>
		</foreach>
	</target>
	-->

	<!--
	<target name="compile_culture" depends="init, compile_intranet"
				description="Compile culture content into production Markdown">
		<delete dir="${culturebuild}"/>
		<copy todir="${culturebuild}" >
			<fileset dir="${culture}"/>
		</copy>
		<replace dir="${culturebuild}" replaceFilterFile="${ditabuild}/conrefs.properties"/>
	</target>
	-->

	<!--
	<target name="compile_intranet" depends="init"
				description="compile the Intranet collection into markdown">
		<mkdir dir="${intranet}"/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance-intranet.ditamap"/>
			<property name="args.filter" value="${ditabuild}/intranet.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/html.ditaval:${ditabuild}/audience-basic.ditaval"/>
			<property name="output.dir" location="${intranet}"/>
			<property name="transtype" value="markdown_github"/>
		</ant>
		<antcall target="policy_builder">
            <param name="thePolicy" value="policy-it-policy"/>
        </antcall>
		<antcall target="policy_builder">
            <param name="thePolicy" value="policy-mobile-device"/>
        </antcall>
		<antcall target="policy_builder">
            <param name="thePolicy" value="policy-physical-security"/>
        </antcall>
		<antcall target="policy_builder">
            <param name="thePolicy" value="policy-information-classification"/>
        </antcall>
		<copy todir="${intranet}/gs" >
			<fileset dir="${basedir}/gs"/>
		</copy>
		<replaceregexp match="\*\*Parent topic\:\*\*(\S)" replace="**Parent topic:** \1" flags="g" >
			<fileset dir="${intranet}" includes="**/*.md"/>
		</replaceregexp>
		<echo message="Convert to Intranet markdown."/>
		<foreach target="addLinkTarget" param="theFile">
			<path>
				<fileset dir="${intranet}" includes="**/*.md"/>
			</path>
		</foreach>
	</target>
	-->

	<target name="compile_md" depends="init"
				description="compile the source into markdown">
		<!-- Prepare RSS and Atom feeds, and Changelog file. -->
		<exec dir="buildUtils" executable="python3">
			<arg line="generateRSS.py"/>
		</exec>
		<copy file="${buildUtils}/atom.xml" todir="${build}" overwrite="true"/>
		<move file="${buildUtils}/atom.xml" todir="${ditabuild}" overwrite="true"/>
		<copy file="${buildUtils}/rss.xml" todir="${build}" overwrite="true"/>
		<move file="${buildUtils}/rss.xml" todir="${ditabuild}" overwrite="true"/>
		<move file="${buildUtils}/changelog.dita" todir="${ditabuild}" overwrite="true"/>
		<echo message="RSS, Atom, and ChangeLog generation complete."/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/html.ditaval:${ditabuild}/audience-tech.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="markdown_github"/>
		</ant>
		<replaceregexp match="\*\*Parent topic\:\*\*(\S)" replace="**Parent topic:** \1" flags="g" >
			<fileset dir="${build}" includes="**/*.md"/>
		</replaceregexp>
		<replaceregexp match="file\:///" replace="" flags="g" >
			<fileset dir="${build}" includes="**/*.md"/>
		</replaceregexp>
		<replaceregexp match="\(downloads" replace="\(../downloads" flags="g" >
			<fileset dir="${build}/ost" includes="**/*.md"/>
			<fileset dir="${build}/hmcts" includes="**/*.md"/>
		</replaceregexp>
		<mkdir dir="${build}/.well-known"/>
		<copy file="${basedir}/contact/vulnerability-disclosure-security.txt" tofile="${build}/security.txt" overwrite="true"/>
		<copy file="${basedir}/contact/vulnerability-disclosure-security.txt" tofile="${build}/.well-known/security.txt" overwrite="true"/>
		<echo message="Convert definition lists to targets in markdown"/>
		<foreach target="dlTarget" param="theFile">
			<path>
				<fileset dir="${build}" includes="**/*.md"/>
			</path>
		</foreach>
	</target>

	<!--
	<target name="compile_html5" depends="init"
				description="compile the source into HTML5 prior to conversion to Word format, for Intranet publication.">
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance-intranet.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/html.ditaval:${ditabuild}/audience-allusers.ditaval"/>
			<property name="output.dir" location="${buildhtml}"/>
			<property name="transtype" value="html5"/>
		</ant>
	</target>
-->

	<!--
	<target name="convertToWord">
		<echo message="Converting file: ${theFile}"/>
		<basename property="theFileName" file="${theFile}" suffix=".md"/>
		<exec dir="${intranet}" executable="pandoc">
			<arg line=" __from=markdown __to=docx ${theFileName}.md __output=${intranet}/${theFileName}.docx"/>
		</exec>
	</target>
-->

	<!--
	<target name="compile_word" depends="convertToWord"
			description="compile Markdown into Word">
		<echo message="Running on: ${os.name}"/>
		<foreach target="convertToWord" param="theFile">
			<path>
				<fileset dir="${intranet}">
					<include name="**/*.md"/>
				</fileset>
			</path>
		</foreach>
		<replace dir="${intranet}" value="#">
			<include name="**/*.md"/>
			<replacetoken># </replacetoken>
		</replace>
	</target>
	-->

	<target name="compile_pdf" depends="init"
				description="compile the source into PDF">
		<!-- First build the Technical users PDF, containing their content. -->
		<echo message="Build PDF: Technical users"/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/pdf.ditaval:${ditabuild}/audience-tech.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="pdf"/>
		</ant>
		<!-- Top and tail the Tech users guide. -->
		<exec dir="buildUtils" executable="python3">
			<arg line="combinator.py ../srcMedia/moj-guidance-tech.pdf ${build}/moj-guidance.pdf ${temp.file}"/>
		</exec>
		<move file="${temp.file}" tofile="${build}/moj-guidance-tech.pdf" overwrite="true"/>
		<echo message="Technical users PDF build complete."/>

		<!-- Now build the Group Security PDF.
		<echo message="Build PDF: Group Security"/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance-gs.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/pdf.ditaval:${ditabuild}/audience-gs.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="pdf"/>
		</ant>
		<!__ Top and tail the Group Security guide. __>
		<exec dir="buildUtils" executable="python3">
			<arg line="combinator.py ../srcMedia/moj-guidance-gs.pdf ${build}/moj-guidance-gs.pdf ${temp.file}"/>
		</exec>
		<move file="${temp.file}" tofile="${build}/moj-guidance-gs.pdf" overwrite="true"/>
		<echo message="Group Security PDF build complete."/>
		-->

		<!-- Next build the Suppliers PDF, containing just their content.
		<echo message="Build PDF: Suppliers"/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/pdf.ditaval:${ditabuild}/audience-suppliers.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="pdf"/>
		</ant>
		# Rename this file to be Suppliers users guide.
		<move file="${build}/moj-guidance.pdf" tofile="${build}/moj-guidance-suppliers.pdf" overwrite="true"/>
	-->

		<!-- Now build the Intranet PDF, containing just its content.
		<echo message="Build PDF: Intranet"/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance-intranet.ditamap"/>
			<property name="args.filter" value="${ditabuild}/intranet.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/pdf.ditaval:${ditabuild}/audience-basic.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="pdf"/>
		</ant>
		<echo message="Intranet PDF build complete."/>
		 -->

		<!-- Now build the 'all users' guide, omitting the technical details. -->
		<echo message="Build PDF: All users"/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/pdf.ditaval:${ditabuild}/audience-basic.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="pdf"/>
		</ant>
		<!-- Top and tail the all users guide. -->
		<exec dir="buildUtils" executable="python3">
			<arg line="combinator.py ../srcMedia/moj-guidance.pdf ${build}/moj-guidance.pdf ${temp.file}"/>
		</exec>
		<move file="${temp.file}" tofile="${build}/moj-guidance.pdf" overwrite="true"/>
		<echo message="All users PDF build complete."/>

		<delete dir='${_dita.map.output.dir}'/>
	</target>

	<target name="compile_epub" depends="init"
			description="compile the source into EPUB">
		<!-- Get the images ready to use
		<copy todir="${images.output.dir}" >
			<fileset dir="${images}"/>
		</copy>
		20220331 -->

		<!-- First build the Technical users EPUB, containing their content. -->
		<echo message="Build EPUB: Technical users."/>
		<!--
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/epub.ditaval:${ditabuild}/audience-tech.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="epub"/>
		</ant>
		-->
		<exec dir="${ditabuild}" executable="ditac" output="build-tech.txt">
			<arg line="-images img -p xsl-resources-directory res -filter audience-tech-ditac.ditaval -format epub3 -index -v out/moj-guidance-tech.epub moj-guidance.ditamap"/>
		</exec>
		<!-- Report results -->
		<loadfile property="epub-tech" srcFile="build-tech.txt" />
		<echo message="${epub-tech}" />
		<echo message="Completed EPUB: Technical users."/>
		<delete file="build-tech.txt"/>
		<!-- Rename this file to be Tech users guide.
		<move file="${build}/moj-guidance.epub" tofile="${build}/moj-guidance-tech.epub" overwrite="true"/>
		-->

		<!-- Next build the Group Security EPUB, containing their content.
		<echo message="Build EPUB: Group Security."/>
		<!__
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance-gs.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/epub.ditaval:${ditabuild}/audience-gs.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="epub"/>
		</ant>
		__>
		<exec dir="${ditabuild}" executable="ditac" output="build-gs.txt">
			<arg line="-images img -p xsl-resources-directory res -filter audience-gs-ditac.ditaval -format epub3 -index -v out/moj-guidance-gs.epub moj-guidance-gs.ditamap"/>
		</exec>
		<!__ Report results __>
		<loadfile property="epub-gs" srcFile="build-gs.txt" />
		<echo message="${epub-gs}" />
		<echo message="Completed EPUB: Group Security."/>
		<delete file="build-gs.txt"/>
		-->

		<!-- Next build the Suppliers EPUB, containing just their content. -->
		<!--
		<echo message="Build EPUB: Suppliers."/>
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/epub.ditaval:${ditabuild}/audience-suppliers.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="epub"/>
		</ant>
		<exec dir="${ditabuild}" executable="ditac" output="build-suppliers.txt">
			<arg line="-images img -p xsl-resources-directory res -filter audience-suppliers-ditac.ditaval -format epub3 -index -v out/moj-guidance-suppliers.epub moj-guidance.ditamap"/>
		</exec>
		<!__ Report results __>
		<loadfile property="epub-suppliers" srcFile="build-suppliers.txt" />
		<echo message="${epub-suppliers}" />
		<delete file="build-suppliers.txt"/>
		<!__ Rename this file to be Suppliers users guide.
		<move file="${build}/moj-guidance.epub" tofile="${build}/moj-guidance-suppliers.epub" overwrite="true"/>
		-->

		<!-- Now build the 'all users' guide, omitting the technical details. -->
		<echo message="Build EPUB: all users, no technical detail."/>
		<!--
		<ant antfile="${dita.dir}/build.xml">
			<property name="args.input" value="${ditabuild}/moj-guidance.ditamap"/>
			<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/notpolicy.ditaval:${ditabuild}/epub.ditaval:${ditabuild}/audience-basic.ditaval"/>
			<property name="output.dir" location="${build}"/>
			<property name="transtype" value="epub"/>
		</ant>
		-->
		<exec dir="${ditabuild}" executable="ditac" output="build-basic.txt">
			<arg line="-images img -p xsl-resources-directory res -filter audience-basic-ditac.ditaval -format epub3 -index -v out/moj-guidance.epub moj-guidance.ditamap"/>
		</exec>
		<!-- Report results -->
		<loadfile property="epub-basic" srcFile="build-basic.txt" />
		<echo message="${epub-basic}" />
		<echo message="Completed EPUB: all users, no technical detail."/>
		<delete file="build-basic.txt"/>
	</target>

	<!-- Do all the builds. -->
	<target name="compile" depends="clean,compile_md,compile_pdf,compile_epub"/>
	<!-- <target name="compile" depends="clean,compile_intranet,compile_md,compile_pdf,compile_epub,compile_ost"/> -->
	<!-- <target name="compile" depends="clean,compile_intranet,compile_md,compile_pdf,compile_epub,compile_word"/> -->
	<!-- <target name="compile" depends="clean,compile_intranet,compile_md,compile_pdf,compile_epub,compile_word,compile_culture"/> -->
	<!-- <target name="compile" depends="compile_intranet,compile_md,compile_pdf"/> -->

	<target name="enableRedirect">
		<echo message="Redirecting file: ${theFile}"/>
		<basename property="theFileName" file="${theFile}"/>
		<concat destfile="${temp.file}">
			<fileset file="${redirects}/${theFileName}"/>
			<fileset file="${docs}/${theFileName}.md"/>
		</concat>
		<copy file="${temp.file}" tofile="${docs}/${theFileName}.md" overwrite="true"/>
	</target>

	<target name="dist_local" depends="compile_md"
		description="generate minimal set to test local build">
	<!--
	<target name="dist_local" depends="compile_md,compile_intranet,compile_ost"
		description="generate minimal set to test local build">
	<target name="dist_local" depends="compile_md,compile_intranet,compile_word"
		description="generate minimal set to test local build">
	-->
	<!-- Create the distribution directory -->
		<mkdir dir="${docs}"/>
		<mkdir dir="${docs}/images"/>
		<mkdir dir="${docs}/iasme"/>
		<mkdir dir="${docs}/gs"/>
		<copy todir="${docs}" >
			<fileset dir="${jekyll-baseline}"/>
		</copy>
		<copy todir="${docs}/iasme" >
			<fileset dir="${iasme}"/>
		</copy>
		<copy todir="${docs}/images" >
			<fileset dir="${ditasrc}/images"/>
		</copy>
		<copy todir="${docs}" >
			<fileset dir="${build}"/>
		</copy>
		<foreach target="enableRedirect" param="theFile">
			<path>
				<fileset dir="${redirects}"/>
			</path>
		</foreach>
		<copy file="${docs}/cyber-and-technical-security-guidance.md" tofile="${docs}/index.md" overwrite="true"/>
		<copy todir="${docs}/gs" >
			<fileset dir="${basedir}/gs"/>
		</copy>
	</target>

	<target name="dist" depends="compile"
				description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${docs}"/>
		<mkdir dir="${docs}/images"/>
		<mkdir dir="${docs}/iasme"/>
		<mkdir dir="${docs}/gs"/>
		<copy todir="${docs}" >
			<fileset dir="${jekyll-baseline}"/>
		</copy>
		<copy todir="${docs}/iasme">
			<fileset dir="${iasme}"/>
		</copy>
		<copy todir="${docs}/images" >
			<fileset dir="${ditasrc}/images"/>
		</copy>
		<copy todir="${docs}/culture" >
			<fileset dir="${culture}"/>
		</copy>
		<copy todir="${docs}" >
			<fileset dir="${build}"/>
		</copy>
		<foreach target="enableRedirect" param="theFile">
			<path>
				<fileset dir="${redirects}"/>
			</path>
		</foreach>
		<copy file="${docs}/cyber-and-technical-security-guidance.md" tofile="${docs}/index.md" overwrite="true"/>
		<copy todir="${docs}/gs" >
			<fileset dir="${basedir}/gs"/>
		</copy>
	</target>

	<target name="preview" depends="compile_md" description="Minimal build for local preview purposes.">
		<delete dir="${docs}"/>
		<mkdir dir="${docs}"/>
		<mkdir dir="${docs}/images"/>
		<mkdir dir="${docs}/iasme"/>
		<copy todir="${docs}" >
			<fileset dir="${jekyll-baseline}"/>
		</copy>
		<copy todir="${docs}/iasme" >
			<fileset dir="${iasme}"/>
		</copy>
		<copy todir="${docs}/images" >
			<fileset dir="${ditasrc}/images"/>
		</copy>
		<copy todir="${docs}" >
			<fileset dir="${build}"/>
		</copy>
		<copy file="${docs}/cyber-and-technical-security-guidance.md" tofile="${docs}/index.md" overwrite="true"/>
	</target>
</project>


<!--

Old build instructions
kept for reference purposes.

	<copy todir="${ditabuild}/ost" >
		<fileset dir="${ost}"/>
	</copy>
	<ant antfile="${dita.dir}/build.xml">
		<property name="args.input" value="${ost}/ost.ditamap"/>
		<property name="args.filter" value="${ditabuild}/github.ditaval:${ditabuild}/html.ditaval:${ditabuild}/audience-tech.ditaval"/>
		<property name="output.dir" location="${ditabuild}/ost"/>
		<property name="transtype" value="dita"/>
	</ant>
	<replaceregexp match=' specializations=""' replace="" flags="g" >
		<fileset dir="${ditabuild}/ost" includes="**/*.md"/>
	</replaceregexp>
	<move todir="${ditabuild}/ost">
		<fileset dir="${ditabuild}/ost">
			<exclude name="**/*dita*"/>
		</fileset>
		<mapper type="glob" from="*.md" to="*.dita"/>
	</move>

-->
